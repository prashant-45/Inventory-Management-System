@model IMS.Models.User  

<div class="container py-4">
    <!-- Header -->
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4 gap-3">
        <div>
            <h2 class="text-primary mb-2"><i class="bi bi-person-circle me-2"></i> User Profile</h2>
            <p class="text-muted mb-0">Manage your account details and preferences</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#changePasswordModal">
                <i class="bi bi-key me-1"></i> Change Password
            </button>
        </div>
    </div>

    <!-- Profile Card -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-header bg-light py-3">
            <h5 class="card-title mb-0 d-flex align-items-center">
                <i class="bi bi-person-badge me-2 text-primary"></i> Account Information
            </h5>
        </div>
        <div class="card-body">
            <div class="row g-4">
                <!-- User Avatar -->
                <div class="col-12 col-md-3 text-center text-md-start">
                    <div class="avatar-profile bg-primary text-white rounded-circle d-flex align-items-center justify-content-center mx-auto mx-md-0 mb-3" 
                         style="width: 100px; height: 100px; font-size: 2.5rem;">
                        @Model.UserName?[0].ToString().ToUpper()
                    </div>
                </div>
                
                <!-- User Details -->
                <div class="col-12 col-md-9">
                    <div class="row g-3">
                        <div class="col-12 col-md-6">
                            <div class="detail-item">
                                <label class="detail-label">Username</label>
                                <p class="detail-value">
                                    <i class="bi bi-person me-1 text-muted"></i>
                                    @Model.UserName
                                </p>
                            </div>
                        </div>
                        <div class="col-12 col-md-6">
                            <div class="detail-item">
                                <label class="detail-label">Email Address</label>
                                <p class="detail-value">
                                    <i class="bi bi-envelope me-1 text-muted"></i>
                                    <a href="mailto:@Model.Email" class="text-decoration-none">@Model.Email</a>
                                </p>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="detail-item">
                                <label class="detail-label">Roles & Permissions</label>
                                <div class="d-flex flex-wrap gap-2 mt-2">
                                    @if (Model.UserRoles != null && Model.UserRoles.Any())
                                    {
                                        foreach (var role in Model.UserRoles)
                                        {
                                            <span class="badge bg-primary">@role.Role.UserRoles</span>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">No roles assigned</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Account Stats (Optional) -->
    <div class="row g-3">
        <div class="col-12 col-md-4">
            <div class="card border-0 shadow-sm text-center h-100">
                <div class="card-body">
                    <i class="bi bi-clock-history display-4 text-primary mb-3"></i>
                    <h5 class="card-title">Member Since</h5>
                    <p class="text-muted">@DateTime.Now.AddYears(-1).ToString("MMM yyyy")</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4">
            <div class="card border-0 shadow-sm text-center h-100">
                <div class="card-body">
                    <i class="bi bi-check-circle display-4 text-success mb-3"></i>
                    <h5 class="card-title">Account Status</h5>
                    <p class="text-muted">Active</p>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4">
            <div class="card border-0 shadow-sm text-center h-100">
                <div class="card-body">
                    <i class="bi bi-shield-check display-4 text-warning mb-3"></i>
                    <h5 class="card-title">Last Login</h5>
                    <p class="text-muted">@DateTime.Now.AddHours(-2).ToString("MMM dd, hh:mm tt")</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Change Password Modal -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content rounded-3 shadow">
            <form id="changePasswordForm" method="post" novalidate>
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="changePasswordModalLabel">
                        <i class="bi bi-key me-2"></i> Change Password
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="userId" value="@Model.Id" />

                    <div class="mb-4">
                        <label class="form-label fw-semibold">New Password</label>
                        <div class="input-group">
                            <span class="input-group-text bg-light">
                                <i class="bi bi-lock text-muted"></i>
                            </span>
                            <input type="password" name="newPassword" id="newPassword" class="form-control" 
                                   placeholder="Enter your new password" required minlength="4" />
                        </div>
                        <div class="form-text text-muted">Enter any password you prefer (minimum 4 characters)</div>
                        <div class="invalid-feedback">Please enter a password with at least 4 characters</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">Confirm Password</label>
                        <div class="input-group">
                            <span class="input-group-text bg-light">
                                <i class="bi bi-lock-fill text-muted"></i>
                            </span>
                            <input type="password" name="confirmPassword" id="confirmPassword" class="form-control" 
                                   placeholder="Confirm your new password" required />
                        </div>
                        <div class="invalid-feedback">Passwords do not match</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i> Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check2-circle me-1"></i> Update Password
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("changePasswordForm");
            const newPassword = document.getElementById("newPassword");
            const confirmPassword = document.getElementById("confirmPassword");

            form.addEventListener("submit", function (e) {
                e.preventDefault();

                let isValid = true;

                // Validate new password (only length check)
                if (newPassword.value.length < 4) {
                    newPassword.classList.add("is-invalid");
                    isValid = false;
                } else {
                    newPassword.classList.remove("is-invalid");
                    newPassword.classList.add("is-valid");
                }

                // Validate confirm password
                if (confirmPassword.value !== newPassword.value) {
                    confirmPassword.classList.add("is-invalid");
                    isValid = false;
                } else {
                    confirmPassword.classList.remove("is-invalid");
                    confirmPassword.classList.add("is-valid");
                }

                if (!isValid) return;

                // Show loading state
                const submitBtn = form.querySelector('button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="bi bi-arrow-repeat spinner"></i> Updating...';
                submitBtn.disabled = true;

                // Submit via fetch
                const formData = new FormData(form);

                fetch('@Url.Action("ChangePassword", "User")', {
                    method: "POST",
                    body: formData
                })
                .then(res => {
                    if (!res.ok) throw new Error("Error updating password");
                    return res.text();
                })
                .then(msg => {
                    // Show success message
                    alert("Password updated successfully!");
                    
                    // Close modal and reset form
                    const modal = bootstrap.Modal.getInstance(document.getElementById("changePasswordModal"));
                    modal.hide();
                    form.reset();
                    newPassword.classList.remove("is-valid");
                    confirmPassword.classList.remove("is-valid");
                })
                .catch(err => {
                    alert("Error: " + err.message);
                })
                .finally(() => {
                    // Restore button state
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                });
            });

            // Real-time password confirmation validation
            confirmPassword.addEventListener('input', function() {
                if (confirmPassword.value === newPassword.value && newPassword.value.length >= 4) {
                    confirmPassword.classList.remove('is-invalid');
                    confirmPassword.classList.add('is-valid');
                } else {
                    confirmPassword.classList.remove('is-valid');
                }
            });

            newPassword.addEventListener('input', function() {
                if (newPassword.value.length >= 4) {
                    newPassword.classList.remove('is-invalid');
                    newPassword.classList.add('is-valid');
                    
                    // Also validate confirmation if it has value
                    if (confirmPassword.value && confirmPassword.value === newPassword.value) {
                        confirmPassword.classList.remove('is-invalid');
                        confirmPassword.classList.add('is-valid');
                    }
                } else {
                    newPassword.classList.remove('is-valid');
                }
            });
        });
    </script>

    <style>
        .avatar-profile {
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .avatar-profile:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 16px rgba(0,0,0,0.2);
        }
        
        .detail-item {
            padding: 0.75rem 0;
            border-bottom: 1px solid #f1f3f7;
        }
        
        .detail-item:last-child {
            border-bottom: none;
        }
        
        .detail-label {
            font-weight: 600;
            color: #6c757d;
            text-transform: uppercase;
            font-size: 0.8rem;
            margin-bottom: 0.25rem;
        }
        
        .detail-value {
            font-size: 1rem;
            margin-bottom: 0;
            color: #495057;
        }
        
        .card {
            border-radius: 0.75rem;
            overflow: hidden;
        }
        
        .btn {
            border-radius: 0.5rem;
            transition: all 0.2s;
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .spinner {
            animation: spin 1s linear infinite;
        }
        
    </style>
}